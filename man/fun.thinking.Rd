% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functionThinking.R
\name{fun.thinking}
\alias{fun.thinking}
\title{A function make function think}
\usage{
fun.thinking(expr, chat = NULL, system_prompt = NULL, more_require = NULL)
}
\arguments{
\item{expr}{An unevaluated R expression, typically a function call.}

\item{chat}{A chat object for AI interaction. If NULL, a warning is shown and
no analysis is performed.
Use the \code{create_fun_chat()} function to create a proper chat
object.}

\item{system_prompt}{A string of system prompt for the AI assistant.
If NULL (default), a default will be set.}

\item{more_require}{A string of more requirements for the AI assistant if
need, default NULL.}
}
\value{
Invisibly returns the result of evaluating the expression.
}
\description{
This function captures and evaluates an R expression while providing
analysis and insights about the function call, its arguments, and results
through an AI assistant (DeepSeek chat API).
}
\details{
The function performs several analysis steps:
\itemize{
\item Captures the unevaluated expression
\item Extracts function name and arguments (if applicable)
\item Uses AI to analyze the function call
\item Checks the function and its parameters
\item Examines the result of the expression
}

The AI assistant can save analysis results in various formats (csv, json,
rds, png, pdf)
based on the task requirements.
}
\examples{
\dontrun{
# First create a chat object
my_chat <- ellmer::chat_openai()

# Analyze a function call with the chat object
fun.thinking(mean(1:10), chat = my_chat)

# Analyze with custom chat settings
custom_chat <- create_fun_chat(
  system_prompt = "Custom analysis instructions",
  model = "alternative-model"
)
fun.thinking(mean(1:10), chat = custom_chat)

# Analyze an object
x <- data.frame(a = 1:5, b = letters[1:5])
fun.thinking(x, chat = my_chat)
}

}
